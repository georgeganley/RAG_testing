>> Hello, I'm Jeff Wilson. I'm the instructor for Game AI. In this video, I'm going to go through some introductory course information. Let me switch over to slides here. So first of all, this class Game AI, we're going to be covering some introductory AI techniques, but this will differ from other AI classes in that it's focused on how to create a fun gameplay experience in a video game. And so this means that we will see examples of cutting corners or performing tricks, perhaps deceiving the game player into how things are operating behind the scenes. And this will diverge from techniques that you might have seen in other classes or if you already have established AI techniques that maybe those are overkill perhaps takes too much processing power from your computer or your game console and you need to pull back and simplify to make a more compelling gameplay experience. So we're going to consider those trade-offs that if you were making a complete video game, trade-offs that you need to make in order to create a full gameplay experience, but still leveraging AI concepts. So we'll definitely get into that discussion in a lot more detail. But again, I'm Jeff Wilson. I have been an instructor at Georgia Tech for a number of years now, working with the College of Computing. I actually was a student, so I'm an alumni of Georgia Tech and I studied computer science both undergrad and grad school, got my PhD at Georgia Tech. My background has been especially in my undergrad and work on my masters. I worked in graphics and interactive audio and especially virtual reality. And for my PhD, I worked a lot in human-computer interaction. So I also teach the video game design class, and that is offered both on campus and in the OMSCS program. I teach Game AI fairly regularly in both on-campus and now in OMSCS, and a few other classes that I occasionally teach. As for the TAs in this class, we won't cover that in this video instead, look on Canvas in the syllabus, there is a section of the main page of the syllabus where the TAs will be listed and will have their contact information including email and their scheduled office hours and the way that you can meet with them, whether it is in-person or by video, depending on the class format for this particular semester. And you can also look for their introductions on Piazza that'll show up within the first few days of class. And of course, you can contact them there so you can reach out by email or Piazza or Canvas messages as well. In terms of the format of the class, we have two exams. There's a midterm and a final. 30% of your grade total comes from these two exams. And they're equally weighted, so 15% each. The final is not cumulative, so I'd only cover topics that are introduced after the midterm. In the case of OMSCS students in their class section, you can expect to be using the remote proctoring with a timed exam. And for on-campus, the format of the exams is going to vary depending on the format of the class. So if we're still under COVID-19 restrictions, then we will probably have some online format. But otherwise, there'll be a preference towards in-person when possible. The rest of the deliverables in the class involve individual effort projects. This will cover the remaining 70% of your grade, and there will be around 6-8 assignments. And so these will be programming assignments where you will be provided a starting point or scaffolding and exploring some concept in Game AI. And you'll develop your code to whatever the specification is for the assignment and that will be assessed by an auto-grading automatic process. So generally it'll be a single source file that you submit. And then that will be run through the auto-grader by the TAs and you'll receive partial credit according to the rubric for each assignment. As for the weights, for the assignments, they'll generally be equally weighted but there might be, for a couple of assignments, maybe some slight variation depending on the difficulty. As for performing the development efforts, we're going to primarily be using the Unity 3D game engine. And you're not expected to already be familiar with Unity. There will be a little exercise at the beginning of the semester for you to try out Unity, mostly geared towards testing to make sure that it runs acceptably on your hardware and also getting up to speed on the basics. The most of the actual programming effort will be self-contained. So each assignment will have one source file. Generally, in this case, you have this one source file with an incomplete implementation and then you have to provide the necessary implementation within that file. And so the programming we're going to use C#. And so this is a strongly typed language with garbage collection if you're not familiar with C#, it's very similar to Java. It also has similar object-oriented concepts which in one or two of the assignments will be touched upon. So you'll be doing your development in C#. There's a recommendation to use the Microsoft Visual Studio with the Unity integration to work on that. There may be later projects, later in the semester that may require some supplementary tools, maybe to perform some preprocessing or preparation of data. >> So that will be something we'll address in a later assignment. But otherwise, the vast majority of the work will be in Unity with C#. So please make sure that as soon as you can, check out Canvas, look for the instructions for installing the correct version of Unity and testing, and also make sure to do all of this well before registration ends. If by some situation you're not able to get Unity working, let's try to identify those problems while you still have a chance to change to a different class and maybe work on identifying some other hardware you can work with before it's too late and you start running up against trouble. I would say it's pretty rare that we encounter a problem with Unity that we can't resolve. Usually, there are some common issues that we can just change a configuration in Unity and fix the problem. And so there is a little troubleshooting section actually on Canvas in the module discussing Unity installation and testing. So If you do have problems, check that out first. I would say 95 percent of the time that resolves the problems. And if you still have issues, of course, you can post on Piazza or reach out directly to the TAs or me, and we will be happy to help out and get everything working for you. As for background, that would be helpful for this class. There are prerequisites for both the undergrad and the grad section. So undergraduates have to take CS 3600, and graduates have to take CS 6601. Both of these are introduction to artificial intelligence, and these are enforced for on-campus students. But OMSCS students, I don't believe any of the prerequisites are enforced, so this is just a recommendation for OMSCS students. Otherwise, if you are familiar with basic computer science concepts such as algorithms, implementing algorithms, understanding how they work, complexity, and also data structures. And then just generally a strong background in software development that you have programmed a variety of different programs or different types of task that you have implemented. Then you I would say have a good chance of being able to understand all of the topics if you don't already have the prerequisite course under your belt. Next step, recommended textbooks. So a lot of the course materials draw from these three books. Primarily, AI for Games is the one that is referenced the most, and therefore, it's recommended more highly than the other two. We also look at some of the materials from Mat Buckland's Programming Game AI by Example. And then there is this third book, Computational Geometry in C. It's not really a game AI topic, but for some of the earlier topics that we will discuss. In particular, modeling a game world in a manageable way, you use these computational geometry principles to divide the world up into spatial areas through a process of discretization. And so it's really important to have robust geometric tests like line intersections, representing things with polygons and so on. And so this book is useful because we need a very stable, very robust way of representing our game worlds in a geometric way. And so this is a textbook that does a good job of addressing these exact same issues that you would run into if you say implementing a path planning system where you're building nav meshes, which we'll learn about in the future or needing to perform other tasks like whether your AI agent has a line of sight, can they see something from their perspective and so on. This would be a useful book for that. And so to conclude this intro to the class last slide, I just want to mention the resources for the class course. If you're going through the Canvas modules, you should already be familiar. But if not, of course, Canvas is the primary point of entry for the entire class. Here we have the syllabus including course policies, which you should go check out to see whatever the specific policies are for the current semester offering. Also, all of the assignments will be posted on Canvas. We'll take advantage of Canvas announcements. You can look for an announcement every week, and then other issues that pop up, perhaps, maybe corrections to assignments if there are any bugs found. And then all your grades will be managed on Canvas. Additionally, there's Piazza, which we have for discussions. And so you can use it either for discussions that involve the entire class or you can also post privately to interact with the TAs and instructor. But otherwise, please check both often. I encourage you that if you're say working on an assignment that you occasionally check for discussions related to the current assignment you're working on on Piazza. Also check Canvas, make sure that you're receiving all of the announcements as part of your e-mail alerts. And if you are up-to-date on everything going on in the class, you'll be in a good position to have success. So that covers the intro to the class. If you have any further questions, feel free to reach out to the TAs or me, again on Piazza or e-mail using the link on the Canvas syllabus, or just use Canvas messaging if you would prefer.
