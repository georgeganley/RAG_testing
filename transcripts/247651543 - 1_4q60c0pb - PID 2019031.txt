>> Hello. In this lecture, I will be introducing the topic of Procedural Content Generation. Procedural content generation, or PCG for short, is simply the generation of content algorithmically. In our case, what we are going to be most interested in video game content. This can include all aspects of the media assets that you might need to create in your games. So certainly things like game levels, including terrain or rooms, hallways, buildings, but also artifacts like the objects that the character interacts with. These might be environmental features like trees and rocks, but also weapons, other objects, maybe even characters and creatures as well. This can include visuals, we can also use procedural content generation for sound and music as well, and we can even include elements that you might associate with the story, so the narrative, the requests, and an activities that the player might be tasked with performing all these different parts of the game, we might apply procedural content generation towards. So you probably if you play games at all recently or even some older games you're probably familiar with PCG and might be able to think of some examples that you either suspect of being generated or that you are aware of. So there are examples such as Spelunky, that's probably one of the most popular recent examples that and of course Minecraft. There's also examples like Horizon Zero Dawn. In particular, they have a very elegant and sophisticated system for placing natural features in their environment, so trees and bushes and rocks, it's a very nice system. There is Dwarf Fortress which generates an entire new universe every time you play it similar to Minecraft, but it actually goes further than that and generate background history. In fact, it's simulates out many steps of interactions between the different civilizations. There is dead cells, which is one of my favorites, that generates different Dungeons with creatures to battle, like different weapons and abilities, because of the way that it's always generating the environments you never know for sure what you're going to be faced with, so it's similar to Spelunky in that regard. There's also games like Sudoku and Nurikabe, which aren't really sophisticated in terms of any media assets that are needed, but instead, there are the puzzle elements, and the puzzle elements are generated to a certain quality level that is appropriate for say, well, first of all, the solvability and also difficulty. There's certainly some interesting aspects of a procedural content generation when it comes to constraint-based puzzles, and being able to work within those constraints to come up with appropriate content such as the unsolved boards for either a Sudoku or Nurikabe puzzle. Now, with the good comes the bad. There are also bad examples of procedural content generation. There is No Man's Sky, which became the go-to example for where PCG did not work out. I can say that this game has continued to evolve with patches and refinements, and perhaps a much better product than when it first came out, but in No Man's Sky, while there was this potential for randomness and therefore lots of unique, say planets and creatures. There were criticisms to early versions of the game that it was all very monotonous and just slightly different skinning, [NOISE] that the quality of the generation was not very good, such as, if you look at the creatures in this screenshot, they don't look nearly as compelling as the showcase examples pre-release of the game. Think it might've been a video for E3 or a similar trade show when No Man's Sky was first introduced and it looked like these amazing dinosaur inspired creatures. While those creatures are certainly a possibility, just the broad range of limb and body types that can be combined can end up with some that are not very aesthetically pleasing. Again, the game just overall, even though there is this broad variety in terms of the gameplay in this early versions, it just wasn't compelling after some short period of playing the game. Mass Effect Andromeda had a different situation, they were relying heavily on this tool world builder that was going to help to generate the different planets are worlds that you could go to, and so they had some very specific ideas about the game design and those design philosophy or desire for their vision, it did not mesh well with the capabilities of world builder. Ultimately, after having made promises about what the game was going to deliver, they had to abandoned use of world builder or at least limit their use of world-builder, so they were not able to create the intended product using this particular Procedural content generation tool. >> If you're interested, a link to a background story. If you're interested in more about the problems that the developers face with mass effect Andromeda. And you can check out that link. You can also find procedural content generation used in somewhat isolated situations in games you might think of it as like low-hanging fruit. There are parts of games, especially as game designers have transitioned to using PCG more and more. They're picking select areas to apply the principles of dynamically generating the content. There's things like speed tree, which is a tool for creating unique trees with random elements but still following a natural order and aesthetic. There's similar tools that you find for other types of objects. There's also the example in Borderlands, that series with the generation of different weapons. And again, this is a very self-contained application of procedural content generation. So varying the number and size of barrels on the weapons, whether they are handheld or not. Using different constraints on how the geometry is defined on these different guns and also different decals and other aesthetic aspects So that is seen as a big success. And it's interesting to consider the Borderlands example because it's not just randomly generating different looking weapons. It's actually coupled with some utility, some value to the player. And so if we think a bit about that actually drawing from some of the discussion that comes up in my video game design class. We can consider the impact that the randomly generated weapons have related to player reward. So the weapons can be obtained by performing endgame tasks like beating an enemy and then collecting the loot. We can consider how often different rewards are obtained. So you might have some rarity to the generated weapon. Some aspects of the procedural content generation such that you rarely have certain valuable attributes that are presented. So you might occasionally have weapons generated that have extremely high value, and therefore they are valuable to the player. But that you don't see them very often. They are rarely occurring, rarely being found, and then there's maybe more common weapons. And so the procedural content generation to be coupled with a reward schedule can be appealing. We can also couple this with operant conditioning. This is looking more closely at the overall rewards schedule. The player encountering multiple battles and multiple opportunities to collect loot and these new weapons that can be presented with a random ratio schedule. And this comes from early operant conditioning research of the Skinner Box study done with rats. This compare different ways in which a rat could be rewarded for pressing a lever. So there's the fixed interval schedule where the lever had no impact. It just the food came out on a time-based schedule of a fixed time length between distribution of the food. There was a fixed ratio schedule, which is food comes out every n times the rat presses the lever. So you'd have a one-to-one, you press the lever, you get a food pellet. You might think that the rat would maybe change behavior if it was a different number of presses. So say two presses or three presses that gets a food pellet. But they quickly learn that as well. Just whenever they're hungry they will get the food. But the random ratio schedule that has addictive properties because the rat has trouble learning how many presses it takes to get food. Because sometimes it'll be a very long number of presses before the food comes out. Sometimes they might get what you would call a hot streak, getting lots of food. That works on humans as well for in terms of reward. So you can see how procedural content generation can fit in nicely with some of these game design concepts. Understanding that humans have these addictive tendencies in terms of gameplay and therefore what they find appealing. So coupling the procedural content generation to introduce this rarity and utility to the player. This is an example of procedural content generation that was very effective. It's a bit different than say, having 100 thousand different creatures through a huge universe where everything's really the same. This is maybe a better use of procedural content generation, at least from the eyes of the game player. Early examples of procedural content generation. So it's actually been around for awhile. At least as early as 1978. We had beneath apple manner which is considered a rogue like though it actually predates the game Rogue so it's generating these maze like structures and has object placement. And I believe it has perma death as well which is a feature that you often will see with some of these procedural content generation game so like the Dungeon Crawlers. And of course, the game Rogue in '80, and then Elite, which is a spaceflight game we're generating a universe so somewhat like No Man's Sky. All of these games use procedural content generation either for generating these dungeons and objects that are placed around or in the case of a lead generating this universe with planets with different attributes and so on. Certainly is not a new thing that while it has this gain in popularity. >> We also see procedural content generation used in a supplementary sort of way. So this is related to maybe picking out certain aspects of the game, such as individual media assets or artifacts a part of the gameplay. But maybe instead of an artifact, we can look for some part of the gameplay, and so we can add depth to the game. You see this fairly commonly in RPG-type games. So this might be to broaden the opportunities to play the game, maybe extend the length of the game. For instance, we could have side quests in a game that the player can participate in, strengthen their character, build character stats through playing through, but that is not part of the quests that are tied to the story. One early example that I can think of and played some was the Elder Scrolls Arena game. This came out in 1994, and it actually had a lot of side quests that were randomly generated. You could talk to randomly generated characters who would give you tasks that were very mundane, as I recall. So a lot of delivery or being sent to a dungeon and you'd have like some particular character to kill or an object to find hidden in the dungeon and all of these were randomly placed items. Elder Scrolls has continued to rely on procedural content generation for the side quest in their future offerings, even in Sky Rim, they had their radiant quests system, which was similar to the original Elder Scrolls Arena, except with some improvements in terms of the quality of the puzzles and the scenarios generated. So it's pretty primitive in Elder Scrolls Arena, but did improve over time. There's also the example of Blood Borne has their chalice dungeons. Some of the dungeons had a randomized element to them that they would all follow the general pattern of, I believe, certain rooms and structures in terms of Internet entering and then recognizing where the boss was and of course had the boss battle. These features for each of these games added to what was possible and what you could do in the game. There's also the game Dwarf Fortress, which is well-regarded for its use of procedural content generation. There is a section in a book, Game AI Pro 2 by Steve Rabin. He's got a little section where Dwarf Fortress is discussed and also you can find some talks like game developer and similar talks about what went into the development of Dwarf Fortress, but Steve Rabin says that, " A tour fortress procedurally generates the entire world from scratch. The process begins with an elevation map generated based on randomized fractals. Next, it creates several map layers which include temperature, rainfall, drainage, vegetation, and salinity with the raw components of the map defined. The next step classifies each tract of land into different biomes, plant and climate types, such as Woodlands or savannas. In the next phase of the simulation, temporary rivers ware down the mountains followed by permanent rivers that flow from high ground to low ground. Plant and animal populations are then introduced followed by worlds specific fantasy creatures. At this point, the world creation is complete and the simulation of civilization begins. Through this process settlements are raised, trade routes are formed and wars are waged. At a designated point in time, the simulation stops and the player begins the game in a unique living world." So there's an entire world not just the terrain and geographic features that are generated, but an entire history is generated, then the player joins in. It's not like this static world that's just sitting there waiting for the player to begin participating. It actually went through an evolution that included long-term simulation of the effects of water erosion. In fact, modeling those sorts of approaches are common in procedurally generated terrain. Some reasons why a game developer might choose to use procedural content generation. Well, there's some obvious benefits. One, this probably pretty important in many cases is development costs savings especially if you take into account the cost of generating high-quality modern-day video game assets like 3D models and textures. A significant cost of developing a game goes into developing this sort of media assets. If you can generate them with procedural content generation algorithms, then you potentially you can save a lot of time and money. But there's also storage costs. Especially there's early examples of the use of procedural content generation was often driven by the very limited storage on early PC computers. So if you could just generate something on-demand as needed, that meant it didn't need to be stored on a floppy or a cassette or whatever sort of storage was available on those early PCs and same is true today. There can be situations where you might otherwise need a huge amount of storage to define where all of these objects are. Horizon Zero Dawn comes to mind with its placement of objects that is driven by a small number of control textures that define probability maps. The likelihood of objects existing in different places and there's an elaborate layering approach to driving that. There's also replayability benefits from procedural content generation. If you can generate new and unique compelling content, then the player will stay engaged with your product for longer than if you otherwise had a smaller amount of handmade assets. There's also the potential for customization, tailoring and environment maybe to user preference, and perhaps even doing so dynamically, including adjusting the difficulty of the game. Whether it's being able to jump from platform to platform, or the challenge of the enemies, or the strategic aspects of the game. If you can figure out how to measure what the player is thinking or feeling, or the difficulties they're facing you might be able to parameterize your procedural content generation and then be able to adjust so that the gameplay experience is most appropriate for what the player is experiencing. Just to go into it a little bit more detail about why use a procedural content generation. So of course, the cost of the content. There can be the low-hanging fruit opportunities, what are clever areas of your game that you might be able to apply procedural content generation without having to fully embrace procedural content perhaps. This might mean using SpeedTree to generate the trees in your environment or maybe generating certain types of objects. But you can also run into complications if you rely on it too much, you might have a mismatch between the capabilities of your generation of content and the design goals of the game so you can refer to the Mass Effect Andromeda game and the problems they had with world builder. It can also address as games move towards more and more realism, that exponential increase in cost. So the cost of making new content to make levels or maps in modern games compared to say, games 20 years ago. We're probably looking at a couple of orders of magnitude difference in the effort. >> Also, the content that is made, that can if developed effectively like the borderlands two guns. Then this can really be interesting and exciting for the player as compared to not using procedural content generation effectively, such that it doesn't have the appeal, is not associated with reward or utility in your game. Having this generated content, we've got the development cost savings, but also this potential for storage and memory utilization. And again, this getting the player to play and replay the game over and over, adapting to the player. So there is a great example in left for dead, they have an AI director. There are internal metrics that try to track what the user is feeling or experiencing in terms of difficulty that they're facing, frustrations and then being able to adapt the content procedurally to work effectively with the player based on how they perform previously. The player is able to participate as part of this feedback loop and the content this generated is responding to these parameter changes. We also see in a game such as Spelunky. We avoid the player being able to have success in the game by simply memorizing the level. Early examples of platforming games like Super Mario brothers could be quite challenging but you could get better at the game by simply memorizing the levels. You knew exactly where the Goombas were and there were the collectibles, the coins and the mushroom power-ups and so on. But in Spelunky, you have to instead craft your skill or develop your skill at playing the game, understanding the mechanics, the universe, and never being able to completely memorize the game. So it's a very different gameplay experience in terms of replay of Spelunky versus replay of Super Mario Brothers or many other platforming games. Definitely some benefits to using PCG and can pay off and add value to game development projects. There's two main applications of procedural content generation. Two different approaches that you can take. So one is that you can have runtime procedural content generation, and this is where we generate content live in the game. So there is no Man's Sky Spelunky, Minecraft, Horizon Zero Dawn. There's lots of examples where content is generated at runtime but then there's also the approach of design time, use of procedural content generation. So this is using PCG to generate and then pick the items that you like or the iterations that you find valuable and you save the content. So you don't get the storage benefits, but you do get this rapid generation of content. So the designer is able to vet what is generated. You might even generate some baseline and then edit it. Level designers in Sky Rim regenerated parts of the world and then things they didn't like they could refine and change. Horizon Zero Dawn and actually you can think of as more of a hybrid between real time and design time because the artists were able to interactively change these density maps for the object placement. So in some cases, they would say automatically based on rules define these different creations of rock placements or tree placements. But then if they didn't like something they could go into one of the probability maps and then just paint onto it. So you can actually do this within a special editing like live version of the game and then just change the placement of objects. So it's had the best of both worlds with both the runtime and the design time. So the artists were able to override the generation, but still seamlessly transition between what the artists controls completely and what's controlled just by constraints in their rules engine for combining the different types of noise sources and other features. So design-time versus run-time. Of course, with design-time we're mainly speeding up the design of the static content and reducing the cost to obtain the content, whereas run-time we get these additional benefits of say, being able to customize dynamic adjustment. Also the storage benefits that we get from runtime. But there's tradeoffs like you don't get to vet or approve of what's generated. You can you can do some trial runs, but you never know necessarily what's going to be generated. Especially if your world is not constrained, like if the player can just keep moving on forever or keep causing new things to be generated, then you might generate something that doesn't work in terms of gameplay or is inappropriate in some way. So with design-time procedural content, we have graphical asset construction that consumes a lot of development time if it's done by hand. And again, games are increasing in complexity and the number of unique objects. And furthermore, there is more and more demand from players. They want high-quality games, they don't want to see repetitive aspects of gameplay or the content and some of these blockbuster games that we see nowadays can have hundreds of man years with huge design teams. So there's a lot at stake when you're making these big expensive games. So anything you can do to reduce cost, there's value. So this is a strong motivation for use of procedural content generation. That the risk you can maybe get unexpected results even if you are able to review or vet the results, you might not have any choice in terms of what you use depending on the capabilities of your algorithm. It might result in content generated that's at odds with your intended design. So these are challenges you might face, especially as big complicated games rely more and more on procedural content generation and maybe either don't fully understand the tools or are developing the tools as they go and don't know what their developers that are assisting the content designers, they don't know what the end result is, what the algorithms are going to be capable of. >> Design time, procedural content generation, you'll generally involve using some tools. The results are vetted for inclusion in games as some examples we've heard, seemed discussed. SpeedTree, there's also Esri CityEngine that can generate procedurally generated cityscapes like streets and blocks and buildings and so on. There is Terragen, which can be used for generating terrain. Originally, it was popular for creating terrain for movies and commercials, but they also, can be that the tool can be used for making video games as well. They've gone through some iterations of their tool. We can consider the payoff that we get from using procedural content generation versus handcrafted and this sort of idealized graph here. You can think of this trade-off in terms of the amount of gameplay that we're attempting to develop. What amount of content do we need to develop versus the total cost? The use of procedural content generation has a lot of upfront costs. Either developing the tool outright, or learning how to use the tool, understanding how to constrain what is generated. This upfront costs might not pay off necessarily if you're only developing a small amount of gameplay. But after a while, the curve begins to flatten out in terms of the cost, because you've sorted out all of the issues. To make more and more content, is just not more difficult than just running the tool more. There's very little human effort that goes in, maybe some vetting or screening depending on what we're talking about and whether it's offline, developer assisted or if it's runtime generated. But a hand-crafted assets will always have the same slope, this same cost. Anytime you want to add more gameplay, you got to spend that much more time developing and hire that many people to develop. It's important to consider how you're applying procedural content generation related to the types of content. You might have single use items, you might have reusable items. You can think in terms of the player character, that is, very important Game Object, a lot of subtlety and movement and control. That's probably the sort of thing that might best benefit from being handcrafted and really refined and iterated on and polished. But then, there are single-use items, like, a chair in a house. These are things that aren't necessarily very important. Those are the situations where you might benefit from procedural content generation. It's not as a single-use item, in the sense that, you only need to make one unique thing for one particular setting or venue in your game. You don't want someone spending a lot of time making that like an artist. Instead, those objects are good candidates for procedural content generation. Even if the procedural content generation is not as good at quality, it would be possible. It's not necessarily items that are going to be front and center, the focus of the game player. Even if they are scrutinized players front, I can spend a lot of time with it. It's more about the overall setting that you are generating. So if lots of objects, lots of features in the environment. Maybe if occasionally things are a little bit off, the players probably are going to be pretty forgiving. Understanding the types of content and where to apply the procedural content can be beneficial. In relation to run-time procedural content generation, we had this opportunity. We know the players are different. They have different preferences and abilities. As soon as we know that we have run-time generated procedural content generation, this probably parameterized. Well, we can play with those parameters by including the player in this feedback loop. I mentioned this previously. We might better change the difficulty or the challenges. We might be able to figure out the players taste, we might be able to figure out players exploits and make adjustments. That can be very interesting. This is almost more of like a research area or, certainly a more recent feature of some video games. If you want to be able to make these adaptations. Of course, this is suggest that you do want real-time procedural content generation. You might also be motivated by storage limits as mentioned before. We have this. If we're talking about generating procedural content generation at run-time, and then adjusting to the player, then this is optimization problem that is introduced and this is where the challenge comes in and so that is, how do we determine the set of content or the parameters of the content? That's going to give the optimal experience at either in terms of preference or difficulty and so on. There's some risks associated with using procedural content generation. These can be certainly a lot worse with run-time generation. That is, the generation of a content procedurally can be an NP-hard problem, you can end up in situations where your algorithm is not going to work well for run-time generation. Also, testing is certainly a challenge. You can't test every possible scenario, just all the different permutations of the parameters. You can really have a lot of trouble there. Any type of PCG, it has the potential to generate offensive material as well. If we were generating names or words, just random combinations of characters might make an offensive word. That's just a very simple example. You'd have other structures or visual imagery that could end up accidentally inappropriate. Even if this is offline or design, designer assisted development, you have to scrutinize everything, if you're just giving a quick overview to content that you're precomputing. You might still miss things. Even if it's not offensive material, you can still have bad content or impossible game place challenges. Maybe the player can't jump from one area to the next or traverse between areas. You can also have issues with algorithms that crash in terms of gearing, guaranteeing computational stability. All these challenges introduced by procedural content generation. You can also end up with meaningless activities like, it might be easy to create quest, such as we saw an Elder Scrolls arena, but they're very mundane there, this disconnected and isolated. No one really cares about them other than just grinding to get experience points. That can become part of boring part of gameplay. Challenges with procedural content generation, story elements, any interactive narrative is still a big challenge and an open research problem. There's algorithms stability that we talked about before so, infinite loops, unanticipated jumps and complexity like you trigger certain paths through the combinations of interacting elements in your algorithm and then suddenly it's running a lot slower. It's really hard to avoid certain circumstances. You, also open problem is automated auditing embeddings so you don't have to have a human that goes over the content to confirm like inappropriate content or that it's appropriate in terms of the gameplay, like being able to jump or traverse. That can be difficult. Then for using run-time PCG adaptively to fit the human player as appropriate, this requires modeling human players understanding what their needs are, what their wants are. That's an open problem not yet figured out. Probably never will be completely, until we can read people's minds. Understanding what human players find interesting, and when they notice repetition, that's another big one. You want to build a randomized interesting aspects of the game and keep it interesting, not mundane. Lastly, we'll wrap up with objectives of PCG. First of all, we want to have PCG to capture design and asset creation expertise. We want it to encapsulate that in an algorithm, and we want the result of applying that algorithm to result in reliable and consistent quality of the content generated. Lastly, we want to support gameplay that would otherwise be impossible without PCG. We're opening up new genres and styles of gameplay with PCG, and that's probably really the most exciting thing about the recent popularity of procedural content generation in games.
