>> Hello. In this lecture, we're going to wrap up our look at procedural content generation. In particular, we'll be looking at player modeling. And this is basically the idea of understanding the player. And we can potentially through understanding the player, be able to drive procedural content generation in a way that maximizes the player's enjoyment of the game. So player modeling is not really any one specific technique, but rather it's a family of approaches for representing and quantifying the player's experience or their preferences with a goal of improving their future experiences. So from the context of procedural content generation, that would mean generating changes in the content such that it better aligns with what the player enjoys doing or how they're doing in terms of gameplay. But outside of procedural content generation, this is commonly a part of analytics to collect information about the player, to understand what they enjoy. And this will inform game designers on how to make new game content. So there's two main approaches that you can use for modeling the player. So one is called model-based. This is where you have some preconceived notion of what the model is, what the categories are. And you're simply trying to assign a player to these already known categories. Then there's also model-free. And this basically is where you don't know what the categories are and you're trying to define those just through some automated statistical grouping processes. So you're looking for trends that can be correlated. And then if you can find these groupings, those essentially become your categories. But they can evolve over time depending on how you've implemented your system. So with model-free approach, you're going to start by trying to learn what these types are. And there'll be some statistical analysis through a regression and look for how variables relate to one another and find a set of connections between these different variables. And then once these are defined, they basically become your categories or these pools of related values or ranges of values. So what exactly might we want to model? Well, it could include demographics. It might be raw gameplay data in terms of different moment-to-moment decisions that are made. Stats on game performance like health, number of kills and a combat game, any accuracy related to gameplay. What are features of the world when actions are performed? We also might have sensors such as input devices, but it could also be things like heart rate monitors and blood pressure. So there's actually been interest in biometrics for games and driving models. Could also be preference, tight information that could perhaps come from questionnaires, maybe given before or after or sometimes even during gameplay. And there could also be aspects of personality, perhaps through a personality inventory, type assessment. So some different types of statistics we might have in the case of left for dead, maybe measuring player health, shot accuracy, number of times damaged or killed. Or in an RPG, we might be interested in areas that are visited, time spent exploring, win-loss ratio, time to complete the level, items found, and the items that are used. And also we might consider a platform or one of the Super Mario games. So we could look at power ups that are collected, number of deaths, the nature of what caused the death, like from an enemy or from falling into a gap. Number of times performing certain actions like ducking, the amount of time between deaths, con blocks that are pressed, number of gaps jumped. So the takeaway here is the metrics that you might be interested in are going to vary and they're going to depend on the game that is being played. So we might consider a game like Mario Kart, where the player is racing on a track. And so we might be making these measurements. Perhaps looking at the player's current place in the race like first place or second place, and so on. And also, we can consider the current state of the world and what the other agents are doing, the power-ups available to the different enemies. And so from all this information, we can get a position in space and maybe make an estimate of where the player is in terms of the current challenge they're facing. And then maybe even make some guess as to whether they're sufficiently challenged relative to their skill. So what do you do based on this information? >> Constantly measuring the player's performance and deciding whether they're likely to be bored by their current situation. In the case of Mario being in first place far into the lead, you might introduce a challenge by say, giving one of the opponents a powerful weapon that knocks out the player so they lose some time. And so they have to exert more effort to get back in to first place or to maintain first place. So for this strategy, you would be modeling the player just through this direct sampling of their ability, may be calculating some metrics, and then be adapting the game moment-to-moment. So this idea is based on this psychological principal called flow. Discovered or defined by a psychologist Mihaly Csikszentmihalyi, very difficult to pronounce name. But he describes this sense of flow where you are in the zone, and you're being challenged in a way that requires full attention, full concentration on the activity, but it's an intuitive sort of concentration so that you're not overly stressed. You feel like you're in full control and it's associated with a pleasant sensation. But it's easy to tip too far to the point where even if you're not outright failing at the task it's associated with these high levels of stress and anxiety. And if you go below that point, it's associated with boredom. So you may have experienced this, say like, driving a car. And it might say you're very bored driving at the speed limit, so you speed up. And you actually feel more engaged driving the car, even though you might be creating a more dangerous situation by going faster. Now in the case of a video game, you can have the system have a feedback loop measuring the player's performance, actually procedurally generate new challenges and said, now in the case of Mario Kart, there's a lot of fixed content. Really, the only things that can be varied are the power-ups and perhaps the capabilities or performance of the AI agents. But other games, you might actually generate more challenging race track curves or other aspects of the game. And it will really be genre dependent. But flow is a good approach to have some hypothesis about what's the right balance of the player's performance, whatever measurements you're making as part of the modeling versus the challenges that are being presented in the challenges mapping to some aspect of the procedural content generation. So with flow, the advantage of this particular approach for player modeling and coupling that with the adaptation of the game is intuitive and it matches well with the player experience. Disadvantage though, you need to be able to design reliable measures for the player challenge and skill, and that's not going to be possible with all games. You also need to build a measure very quickly. You have to have really tight coupling for this feedback loop and it's difficult for non-competitive games. And there's certainly games that don't capture or don't have the potential to capture the flow experience. So in a video game design class, we talked about a particular type of game play called game field games. So those tend to be well aligned with the experience of flow. But there are certainly other types of games where that is not a likely experience. Certainly like puzzle games or adventure games can be problematic for that, so flow is not one size fits all solution for driving procedural content generation configuration and optimizing for the player. It's really only going to work for certain types of gameplay. Next step we might consider drama management. And so the idea with drama management is that we're aiming for certain experiences for the player. So with drama management it's really a nod towards common user preference for how conflict is presented. In the drama, like in stories or movies. The viewers or the audience typically is presented with a setting or exposition. And there is a rising action where some conflict is introduced. And then that rising action builds and builds to a climax where there is a process of resolution leading to this falling action. And the story concludes. And often you'll find that drama is broken up into smaller pieces. So you might have progression of the drama is over a period of time that is appropriate for the fatigue that the user or the audience might have to deal with. Like a movie, someone can only sit still for so long and be comfortable. You have your typical like all movies have about the same length and all games are similar, but they're not as passive. So these period of time for games tends to be shorter. Especially like action games where the users highly engage. There's this intensity there and the player will quickly get fatigued if they don't have brakes. So this is something that's been discovered by game designers and been built into the static source of gameplay experiences for many years now. So in games like say Metal Slugs, side scroller with just like lots of weapons and enemies and just wave after wave of enemy. They follow this pattern where the players hit with a challenge, some wave of enemies. And they might be running low on resources and be really challenging, but then they make it past the climax. And then they get an opportunity to recover. So there's a cooling off period where they can restore their health with power-ups and may pick up some ammo and be ready for the next wave. So this idea can be applied in an automated way through elements of procedural content generation. And so we can think of this dramatic arc as taking some amount of time. And we have something like target amount of time that we wish to achieve. And then there's some intensity that we wish to recognize and achieve. So that intensity might be related to the player modeling. And so we might look at something like health levels or the successes and the gameplay of fighting the enemy. So the game Left4Dead actually uses this approach. And it has this AI director agent working behind the scenes, constantly measuring the player intensity, experience. So looking at the enemies that the player is engaging with the kill counts. And then you can imagine that the max intensity would be when the character, they're controlling is killed. But you can look at other events leading up to that, taking damage. Maybe being surrounded by enemies. There's different contributing factors that we might be able to measure and evaluate. >> So the players intensity score will drop when nothing is happening or less is happening. And we'll have this reset at the start of a new stage. You might also consider like waves of enemies where you ramp up to a climax and then come back down again. You don't want to keep the player pegged at the full intensity. Some contrast in terms of gameplay can actually be beneficial to the player enjoying the experience. So this has some similarities to flow, except we're really aiming for it to ramp up and down again. So we're engaging with the user being more involved, maybe more in that flow experience, but then bringing them back out of it, letting them recover. So there's these three modes that the AI director engages with the buildup. So the AI director will attempt to increase tension. And so again, monitoring the player through these different metrics, these live metrics. And then aiming to reach peak intensity for the player. And ideally, you want to do this in a way that does not disruptive to the experience. So outright killing the player can be quite disruptive, pull them out of the experience. So that's something you generally want to avoid but you can certainly create a lot of tension if the player gets close to that experience. In fact, some games that aim for this tension might do tricks like, say in a boss fight. When you're health gets low, the bosses attacks might start to reduce or they'll avoid using their strongest attacks. And those attacks will not occur again until the player gets an opportunity to collect some more like health packs or that sort of thing. So there's a potential for a little bit of trickery in terms of the content, any procedural content generation. And then the last state is the director will relax the tension according to where we are in the timeline for the dramatic arc that we're trying to create. So if we've passed that point of climax, you're likely to start seeing those health pickups pop up. And this will decrease the tension. We might also stop spawning as many enemies in ramping down. And this all can be driven by a finite state machine. So pretty simple AI implementation though, it can certainly get more complicated and each of these three states can maybe be broken down in a hierarchical since could end up being fairly elaborate. So the drama management approach for modeling is very effective, highly praised. It doesn't necessarily work well for every game, but it matches well with the experiences that players like. And it introduces a new element of strategy in terms of gameplay for the player, understanding that they just have to get past their climax and knowing when, say they'll have the opportunity to get more health. Disadvantage though, this felt fair amount of authoring that's involved. It isn't as much as player types, which we're about to look at but there's more involved than with flow because you have to be able to understand exactly what this pattern is for making the dramatic arc and making sure you are measuring the correct thing in terms of the player modeling. And the drama management, most likely it's going to be implemented with a finite state machine. So you have those downsides of the implementing and testing and debugging the finite state machine. So now we're going to look at player type modeling. There are other approaches in this. I just wanted to go through one to give you an idea how this would work. So the basic idea is that you have some template categories that you're going to assume you can fit every player into. So one comes from the work originally for tabletop RPGs. So this is Robbins Laws of Good Gamemastering. And so in this book, there's five player archetypes. So there's a fighter who prefers combat power gamer that enjoys gaining special abilities and riches, method actor, likes taking dramatic actions. Tactician prefers thinking creatively and solving problems. And storyteller prefers complex plots. So these archetypes are most applicable to those that are playing something like Advanced Dungeons and Dragons or some other tabletop RPG. But you can carry over into video games as well certainly. So one approach you might take while using these archetypes is to each player has a vector. This vector represents the degree to which their actions represent these different categories. So each action is tagged with one of these roles. And so there's demand on the game designers to categorize all of these potential actions. Each time a player takes an action, you update that value in the vector of the associated roles so they increases in value. Then the system chooses reward to incentivize those roles. So it's basically, you reinforce the roles that the player tends to demonstrate. >> Doing this, it can be useful for you understanding the different types of players is it puts up a bit of pressure on designers to be aware. You wish we can have these sorts of archetypes, to make sure that there are interesting choices for every type of player. That there's opportunities to play a game with different mindsets, different ways of enjoying the game, and then being able to reinforce the path through the game that will lead to the most enjoyable experience. So once you start to realize through the modeling, what category or archetype the player fits into, you can start bringing attention to the quests, to the actions that the player can perform that fit within that category. So it's really based all on frequency. The player, when you start to notice the player like prefers to resolve issues with fighting, then you start rewarding that and allowing them to build skill in that area, get weapons and other opportunities to continue along that path. But if the player is choosing to avoid fighting, then you might de-emphasize fighting as a way forward in the game. May be present new opportunities. You could say even open up or generate new content according to discovering the player fitting into this model. There's other types of models you could come up with this. It's going to depend a bit on the game genre. There's certainly other approaches you could take other than this, which again was originally employed for the tabletop RPGs. So having the player type and fitting the player to these types, it can allow designers to understand their player base, and it can broaden the appeal of the game. And so you can make sure your game appeals to these different categories. Disadvantage though, different games and the genres that will need their own player types design, and that can be a tricky tasks. It can take a lot of time to come up with these. You might miss a category if you don't go through the proper steps to really explore what the different types are. And to actually use the model to drive procedural content generation. It requires a lot of extra knowledge and effort in terms of authoring. Because again, all these different actions that are available have to be somehow tagged or identified as being associated with the different archetypes. So if you don't have that information there, you can't act upon it. And so that can make it tricky to use the player types for that purpose. So to close things out regarding player modeling, we can consider how we can use a player model from an end-to-end gameplay experience. So ultimately the game there's a loop in terms of this is feedback loop involving the player. But we might prime this loop by starting with player preference, so this could be in the form of some questionnaire. So we query the user to find out maybe something about them that will bootstrap the process and we feed that into our ongoing modeling of the player. And so during the gameplay we'll be monitoring player performance and anything else that might identify preferences and then we'll adapt the game. So some elements of procedural content generation could be related to items that are generated, enemies that are spawned, perhaps even changing the nature of the terrain. So you might think of say a game like Spelunky. We might actually inform the levels we're generating, and then we will measure the effectiveness of those changes in terms of the updated player performance. And so this is done in such a way that we're trying to determine that the player is enjoying the game. We might be looking for flow or that we're awarding behaviors that are associated with what appears to be the preferred category or arc type of play. And we can also use that same information to re-model, re-perform this categorization of the player types through perhaps like the model-free approaches. And so now we'll get updated models of player types. And that could potentially feed in to new ways of measuring performance and maybe change the way that procedural content is generated. So this was a very light introduction to player modeling. There's certainly a lot more approaches and issues to consider, but it is also something that there's a lot of research interest in and a lot of interest in terms of commercial game development. I've seen discussion of major game companies like Nintendo being interested in, say like bio-metric, introducing bio-metric feedback into their games. So like being able to measure heart rate or galvanic skin response. Maybe even like blood pressure or looking at the player's eyes so you might be able to detect stress from the dilation of the pupil in the eye. I think that this will become more and more popular to model the player not just for a static analysis of gameplay, but rather to have this live feedback loop and adapting gameplay, adapting the content through procedural content generation to optimize the gameplay experience.
